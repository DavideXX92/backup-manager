<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    x:Class="PDSclient.Dictionary">
    
    <!--App background-->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="images\sfondo1.jpg"/>
            </Setter.Value>
        </Setter> 
        <Setter Property="BorderThickness" Value="1,1,1,1" />
        <Setter Property="CornerRadius" Value="8,8,8,8" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!--Loading background-->
    <Style x:Key="LoadBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="images\sfondo1.jpg" Opacity="0.7"/>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1,1,1,1" />
        <Setter Property="CornerRadius" Value="10,32,10,32" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!--Alert background-->
    <Style x:Key="AlertBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background">
            <Setter.Value>
                <ImageBrush ImageSource="images\sfondo1.jpg" Opacity="0.9"/>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1,1,1,1" />
        <Setter Property="CornerRadius" Value="0,0,0,0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!--Style for titles-->
    <Style x:Key="titleH" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!--Style loading title-->
    <Style x:Key="titleLoad" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="pack://application:,,,/Resources/fonts/#Akaju Outline"/>
    </Style>

    <!-- Style 'common' text-->
    <Style x:Key="myText" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>
    
    <!--TextBox-->
    <Style x:Key="placeHolder" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">       
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Panel.ZIndex" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="textSource" Property="FocusManager.FocusedElement" Value="{Binding ElementName=textSource}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Grid>
                        <TextBox Text="{Binding Path=Text,
                                            RelativeSource={RelativeSource TemplatedParent}, 
                                            Mode=TwoWay,
                                            UpdateSourceTrigger=PropertyChanged}"
                                x:Name="textSource" 
                                Background="Transparent" 
                                CaretBrush="White"
                                Foreground="White"
                                Panel.ZIndex="1"
                                FontSize="{TemplateBinding FontSize}"
                                Height="{TemplateBinding Height}"
                                Width="{TemplateBinding Width}"
                                Focusable="True"
                                KeyboardNavigation.IsTabStop="True"
                                BorderBrush="White"/>
                        <StackPanel Orientation="Horizontal" Background="#164566">
                            <Image Source="images\man_white.png" Height="18" Margin="5,0,0,0">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Text, Source={x:Reference textSource}}" Value="">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>                                            
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBox Text="{TemplateBinding Tag}" Background="{TemplateBinding Background}" Panel.ZIndex="1">
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}">
                                        <Setter Property="Foreground" Value="Transparent"/>
                                        <Setter Property="FontSize" Value="{Binding Path=FontSize, Source={x:Reference textSource}}"/>
                                        <Setter Property="Height" Value="{Binding Path=Height, Source={x:Reference textSource}}"/>
                                        <Setter Property="BorderBrush" Value="Transparent"/>
                                        <Setter Property="Margin" Value="6,0,0,0"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Text, Source={x:Reference textSource}}" Value="">
                                                <Setter Property="Foreground" Value="LightGray"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                        </StackPanel>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--PasswordBox-->
    <Style x:Key="placeHolderPwd" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource {x:Type PasswordBox}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Panel.ZIndex" Value="2"/>
        <Setter Property="BorderBrush" Value="White"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="CaretBrush" Value="White"/>
        <EventSetter Event="PasswordBox.PasswordChanged" Handler="passwordChangedHandler"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="gridPwdPlaceholder">
                            <ScrollViewer x:Name="PART_ContentHost" Background="#164566"/>
                            <StackPanel x:Name="panelPwdPlaceholder" Orientation="Horizontal">
                                <Image x:Name="pwdImage" Source="images\lock_white.png" Height="18" Margin="5,0,0,0"/>
                                <TextBox x:Name="pwdPlaceholder" Text="{TemplateBinding Tag}" 
                                         Background="{TemplateBinding Background}" Panel.ZIndex="1">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}">
                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                            <Setter Property="Margin" Value="6,0,0,0"/>
                                            <Setter Property="Foreground" Value="LightGray"/>
                                            <Setter Property="IsHitTestVisible" Value="False"/>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#4b8af1"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#4b8af1"/>
                        </Trigger>
                        <!--Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#4b8af1" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#4b8af1"/>
                        </-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>           
        </Setter>
    </Style>  

    <!--Button switch tab!-->
    <Style x:Key="buttonSwitch" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Template">                   
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="Transparent" BorderBrush="Transparent">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                    Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="#4b8af1" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Button to confirm a request, sending a form (e.g. login or registration)-->
    <Style x:Key="buttonSendForm" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#164566"/> <!-- #4b8af1-->
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Height" Value="40"/>        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                    BorderBrush="Transparent" CornerRadius="5,5,5,5" x:Name="bd">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                    Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="bd" Property="Background" Value="#4b8af1"/>
                            <Setter Property="Foreground" Value="White" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Button alert-->
    <Style x:Key="buttonAlert" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#164566"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="90"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                    BorderBrush="Transparent" CornerRadius="5,5,5,5" x:Name="bd">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                    Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="bd" Property="Background" Value="#4b8af1"/>
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="LightGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Button change dir-->
    <Style x:Key="buttonChangeDir" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="800"/>
        <Setter Property="ToolTipService.ShowDuration" Value="15000"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="1000"/>
        <Setter Property="ToolTip" Value="Change directory"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                    BorderBrush="Transparent" x:Name="bd">
                        <Grid>
                            <Image Name="image" Source="images\folderSearch.png" Height="25"/>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Error style-->
    <Style x:Key="error" TargetType="{x:Type Label}">
        <Style.Setters>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Foreground" Value="#FFCCCC"/>            
            <Setter Property="FontWeight" Value="Bold"/>
        </Style.Setters>
    </Style>
    
    <!--Window control button-->
    <Style x:Key="windowControlButton" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="auto"></Setter>
        <Setter Property="Height" Value="auto"></Setter>
        <Setter Property="Margin" Value="0,0,0,0"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>    
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="Transparent" BorderBrush="Transparent">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                    Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="LightGray" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--CONSOLE style-->
    
    <Style x:Key="consoleStyle" TargetType="RichTextBox">
        <Style.Resources>
            <Style TargetType="{x:Type Paragraph}">
                <Setter Property="Margin" Value="0"/>
            </Style>
        </Style.Resources>
        
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="IsReadOnly" Value="True"/>         
        <Setter Property="Template">
            <Setter.Value>                
                <ControlTemplate TargetType="RichTextBox">
                    <Border BorderBrush="White"
                            BorderThickness="1"
                            CornerRadius="0,0,0,0">
                        <ScrollViewer x:Name="PART_ContentHost"/>                        
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="mainBorder" TargetType="Border">
        <Setter Property="BorderBrush" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style x:Key="GridHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <TextBlock Background="Transparent" 
                               Text="{TemplateBinding Content}" 
                               Padding="5" 
                               FontSize="14"
                               Width="{TemplateBinding Width}" 
                               Foreground="White"/>                        
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- STYLES for checkbox slider -->
    <Style x:Key="CheckRadioFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="SliderCheckBox" TargetType="{x:Type CheckBox}">        
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="StoryboardIsChecked">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="CheckFlag">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="14"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="StoryboardIsCheckedOff">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="CheckFlag">
                                <EasingDoubleKeyFrame KeyTime="0" Value="14"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                        <BulletDecorator.Bullet>
                            <Border x:Name="ForegroundPanel" BorderThickness="1" Width="35" Height="20" CornerRadius="10">
                                <Canvas>
                                    <Border Background="White" x:Name="CheckFlag" CornerRadius="10" VerticalAlignment="Center"
                                            BorderThickness="1" Width="19" Height="18" RenderTransformOrigin="0.5,0.5">
                                        <Border.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Border.RenderTransform>
                                        <Border.Effect>
                                            <DropShadowEffect ShadowDepth="1" Direction="180" />
                                        </Border.Effect>
                                    </Border>
                                </Canvas>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ForegroundPanel" Property="Background" Value="#164566" />
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="BeginStoryboardCheckedTrue" Storyboard="{StaticResource StoryboardIsChecked}" />
                                <RemoveStoryboard BeginStoryboardName="BeginStoryboardCheckedFalse" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="ForegroundPanel" Property="Background" Value="Gray" />
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="BeginStoryboardCheckedFalse" Storyboard="{StaticResource StoryboardIsCheckedOff}" />
                                <RemoveStoryboard BeginStoryboardName="BeginStoryboardCheckedTrue" />
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Path textbox-->
    <Style x:Key="path" TargetType="TextBox">
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="Height" Value="23"/>
        <Setter Property="FontStretch" Value="Normal"/>        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border BorderBrush="Transparent">
                        <StackPanel Orientation="Horizontal" Background="White">
                            <Image Source="images\Icons\Folder_stuffed.ico" Height="18" Margin="5,0,0,0"/>                            
                            <ScrollViewer x:Name="PART_ContentHost"/>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>    

    <Style x:Key="ProgressBarCustomStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="#353535"/>
        <Setter Property="BorderBrush" Value="#4f4d4e"/>
        <Setter Property="BorderThickness" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot" SnapsToDevicePixels="True">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate">
                                    <Storyboard>
                                        <ColorAnimation
                                                Storyboard.TargetName="Animation" 
                                                Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                From="#164566"
                                                To="#5293bb"            
                                                Duration="0:0:0"
                                                AutoReverse="False"/>
                                        <!--From="#fff7f7f7" To="#ff00a8e3"-->
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <ColorAnimation
                                                Storyboard.TargetName="Animation" 
                                                Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                From="#164566"
                                                To="#164566"         
                                                Duration="0:0:0"
                                                AutoReverse="True"/>
                                        <RectAnimation Storyboard.TargetName="ViewportAnimation" Storyboard.TargetProperty="Viewport" From="-80 0 25 40" To="-5 0 25 40" Duration="0:0:3" RepeatBehavior="Forever" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border Background="{TemplateBinding Background}"/>
                        <Rectangle x:Name="PART_Track"/>
                        <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" RenderTransformOrigin="0.5,0.5" Margin="0"
                                       Fill="Red"/>
                            <!--che è?-->
                            <Border Background="#164566" x:Name="Animation" RenderTransformOrigin="0.5,0.5">
                                <!--#fff7f7f7-->
                                <Rectangle>
                                    <Rectangle.Fill>
                                        <DrawingBrush Viewport="-80,0,25,40" ViewportUnits="Absolute" TileMode="Tile"
                                                      x:Name="ViewportAnimation">
                                            <DrawingBrush.Drawing>
                                                <DrawingGroup>
                                                    <GeometryDrawing Brush="#5293bb">
                                                        <!--#ff00a8e3-->
                                                        <GeometryDrawing.Geometry>
                                                            <RectangleGeometry Rect="-30,0,60,40">
                                                                <RectangleGeometry.Transform>
                                                                    <SkewTransform AngleX="-60" />
                                                                </RectangleGeometry.Transform>
                                                            </RectangleGeometry>
                                                        </GeometryDrawing.Geometry>
                                                    </GeometryDrawing>
                                                </DrawingGroup>
                                            </DrawingBrush.Drawing>
                                        </DrawingBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                    </TransformGroup>
                                </Border.RenderTransform>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>